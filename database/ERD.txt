User:
    id
    first_name
    last_name
    email
    phone
    password
    address
    city
    zip_code
    country
    permissions

Product:
    id
    title -> product_name
    slug
	category
	
	price
	image
	status
	condition
	purchase_count
	
CPU:
	id
	product_id *
	
	name
	price
	core_count
	core_clock
	boost_clock
	tdp
	graphics ->nullable
	smt
	
	image
	description
	status

Bookmark:
	id
	user_id*
	product_id*

Cart Item:
    id
    user_id*
    product_id*
    quantity
    total_price

Purchase:
    id
    user_id*
    purchase_date
    total_amount
    purchase_status

Purchase Item:
    id
    purchase_id*
    product_id*
    quantity
    total_price

Payment:
    id
    user_id*
    purchase_id*
    date_of_payment
	payment_type
    payment_status

Voucher:
    id
    title
    value
    description

-------------------------------------------------------------------------------

CATEGORIES
	- computercase
		product_id *
		
		name
		price

		type
		color ->nullable
		psu ->nullable
		sidepanel ->nullable
		external_525_bays ->int
		internal_35_bays ->int
		
		image
		description
		status
		
	- case_fan
		name
		price

		size
		color ->nullable
		rpm ->array->nullable
		airflow ->array->nullable
		noise_level ->array->nullable
		pwm ->bool
		
	- cpu
		name
		price

		core_count ->int
		core_clock ->decimal
		boost_clock ->decimal->nullable
		tdp ->int
		graphics ->nullable
		smt ->bool
	
	- cpu_cooler
		name
		price

		rpm ->array->nullable
		noise_level ->array->nullable
		color ->nullable
		size ->int->nullable
	
	- ext_storage
		name
		price

		type
		interface ->nullable
		capacity ->int
		price_per_gb ->decimal->nullable
		color ->nullable
	
	- int_storage
		name
		price

		capacity ->int
		price_per_gb ->decimal->nullable
		type ->nullable
		cache ->int->nullable
		form_factor
		interface
		
	- headphone
		name
		price

		type
		frequency_response ->array->nullable
		microphone ->bool
		wireless ->bool
		enclosure_type
		color ->nullable
	
	- keyboard
		name
		price

		style
		swithces ->nullable
		backlit ->nullable
		tenkeyless ->bool
		connection_type
		color ->nullable
	
	- memory
		name
		price

		speed ->array
		modules ->array
		price_per_gb ->decimal->nullable
		color ->nullable
		first_word_latency ->int
		cas_latency ->int
	
	- monitor
		name
		price

		screen_size ->decimal
		resolution ->array
		refresh_rate ->int->nullable
		response_time ->decimal->nullable
		panel_type ->nullable
		aspect_ratio
	
	- motherboard
		name
		price

		socket
		form_factor
		max_memory ->int
		memory_slots ->int
		color ->nullable
	
	- mouse
		name
		price

		tracking_method
		connection_type ->nullable
		max_dpi ->int->nullable
		hand_orientation ->nullable
		color ->nullable
	
	- psu
		name
		price

		type
		efficiency ->nullable
		wattage ->int
		modular
		color ->nullable
	
	- speaker
		name
		price

		configuration ->decimal
		wattage ->int->nullable
		frequency_response ->array->nullable
		color ->nullable
	
	- video_card
		name
		price
		
		chipset
		memory ->int
		core_clock ->int->nullable
		boost_clock ->int->nullable
		length ->int->nullable
		color ->nullable
	
	- webcam ****
		name
		price

		resolutions->array
		connection
		focus_type ->nullable
		os ->array
		fov ->int->nullable
		
computer_case
case_fan
cpu
cpu_cooler
ext_storage
int_storage
headphone
keyboard
memory
monitor
motherboard
mouse
psu
speaker
video_card
webcam



purchase_count (sold)
status
condition

purchase_status
	Processing
	Shipped
	Delivered
	Completed


3
cpu 10
memory
intstorage 5 5
motherboard
gpu


    "require-dev": {
        "barryvdh/laravel-debugbar": "^3.8",
        "fakerphp/faker": "^1.9.1",
        "laravel/breeze": "^1.21",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.1",
        "spatie/laravel-ignition": "^2.0"
    },
	
	
To reduce the size of the serverless function in your Laravel project, you can follow these steps:

Remove Unnecessary Dependencies: Check your composer.json file and remove any unused or unnecessary dependencies that are not required for your serverless function. Run composer install --no-dev to exclude development dependencies during the deployment process.

Optimize Autoloading: Use the composer dump-autoload --optimize command to optimize the autoloader, which reduces the number of files loaded during runtime.

Disable Debugging and Profiling: Make sure that your Laravel application is not set to debug mode or profiling mode in the .env file. Set APP_DEBUG to false and APP_ENV to production.

Remove Unnecessary Files and Folders: Exclude any unnecessary files and folders from your deployment to reduce the size of the function. For example, you can exclude assets, unnecessary images, and large files that are not used by the serverless function.

Optimize Assets: Minify and compress your CSS, JavaScript, and other assets to reduce their size.

Check for Large Libraries: If your application uses large third-party libraries, consider using smaller alternatives or customizing the library to include only the necessary parts.

Avoid Duplicated Code: Check for any duplicated code and refactor it to reuse functions or classes where possible.

Optimize Images: Compress and optimize images used in your application to reduce their size.

Use Lazy Loading: If you are using Laravel 8 or later, make use of the lazy loading feature for routing and relationships to load only what is needed.

Check for Large Assets: If you have large assets, consider hosting them externally and loading them through CDN.

After implementing these optimizations, try deploying your Laravel application again to see if the serverless function size has been reduced. Keep in mind that serverless functions have a maximum size limit, so it's essential to keep your application as lightweight as possible for efficient deployment and execution.